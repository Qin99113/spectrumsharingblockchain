// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spectrumsharingblockchain/spectrumallocation/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the spectrumallocation module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params      Params                `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Allocations []*SpectrumAllocation `protobuf:"bytes,2,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Channels    []*Channel            `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc737d53c5b248cb, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetAllocations() []*SpectrumAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func (m *GenesisState) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type SpectrumAllocation struct {
	AllocationId   uint64     `protobuf:"varint,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	RequestId      uint64     `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Creator        string     `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Organization   string     `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	UserType       string     `protobuf:"bytes,5,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	Channels       []*Channel `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
	Bandwidth      int32      `protobuf:"varint,7,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	StartTime      int64      `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64      `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Priority       int32      `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	Status         string     `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	AllocationType string     `protobuf:"bytes,12,opt,name=allocation_type,json=allocationType,proto3" json:"allocation_type,omitempty"`
}

func (m *SpectrumAllocation) Reset()         { *m = SpectrumAllocation{} }
func (m *SpectrumAllocation) String() string { return proto.CompactTextString(m) }
func (*SpectrumAllocation) ProtoMessage()    {}
func (*SpectrumAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc737d53c5b248cb, []int{1}
}
func (m *SpectrumAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpectrumAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpectrumAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpectrumAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpectrumAllocation.Merge(m, src)
}
func (m *SpectrumAllocation) XXX_Size() int {
	return m.Size()
}
func (m *SpectrumAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_SpectrumAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_SpectrumAllocation proto.InternalMessageInfo

func (m *SpectrumAllocation) GetAllocationId() uint64 {
	if m != nil {
		return m.AllocationId
	}
	return 0
}

func (m *SpectrumAllocation) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *SpectrumAllocation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SpectrumAllocation) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *SpectrumAllocation) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

func (m *SpectrumAllocation) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *SpectrumAllocation) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *SpectrumAllocation) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SpectrumAllocation) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SpectrumAllocation) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SpectrumAllocation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SpectrumAllocation) GetAllocationType() string {
	if m != nil {
		return m.AllocationType
	}
	return ""
}

type Channel struct {
	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Frequency     int32    `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Bandwidth     int32    `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	ChannelStatus string   `protobuf:"bytes,4,opt,name=channel_status,json=channelStatus,proto3" json:"channel_status,omitempty"`
	AllowedUsers  []string `protobuf:"bytes,5,rep,name=allowed_users,json=allowedUsers,proto3" json:"allowed_users,omitempty"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc737d53c5b248cb, []int{2}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Channel) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Channel) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *Channel) GetChannelStatus() string {
	if m != nil {
		return m.ChannelStatus
	}
	return ""
}

func (m *Channel) GetAllowedUsers() []string {
	if m != nil {
		return m.AllowedUsers
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "spectrumsharingblockchain.spectrumallocation.GenesisState")
	proto.RegisterType((*SpectrumAllocation)(nil), "spectrumsharingblockchain.spectrumallocation.SpectrumAllocation")
	proto.RegisterType((*Channel)(nil), "spectrumsharingblockchain.spectrumallocation.Channel")
}

func init() {
	proto.RegisterFile("spectrumsharingblockchain/spectrumallocation/genesis.proto", fileDescriptor_dc737d53c5b248cb)
}

var fileDescriptor_dc737d53c5b248cb = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4d, 0x8b, 0x13, 0x31,
	0x18, 0xc7, 0x3b, 0x9d, 0xed, 0xcb, 0x3c, 0xed, 0xae, 0x18, 0x44, 0x62, 0xd5, 0x71, 0xa8, 0x88,
	0x45, 0xa4, 0x85, 0x75, 0x3d, 0xe8, 0x49, 0xeb, 0x41, 0xf6, 0x22, 0x3a, 0x5d, 0x11, 0xbc, 0x94,
	0x74, 0x26, 0xb6, 0xc1, 0x4e, 0x32, 0x26, 0x29, 0x6b, 0xfd, 0x14, 0x7e, 0x02, 0xc1, 0x9b, 0x47,
	0xef, 0x7e, 0x81, 0x3d, 0xee, 0xd1, 0x93, 0x48, 0x7b, 0xf0, 0x6b, 0xc8, 0x64, 0xd2, 0xce, 0xd6,
	0xd5, 0x43, 0xc1, 0x4b, 0x99, 0xfc, 0x9e, 0x97, 0x3c, 0xcf, 0xff, 0xdf, 0xc0, 0x43, 0x95, 0xd2,
	0x48, 0xcb, 0x59, 0xa2, 0x26, 0x44, 0x32, 0x3e, 0x1e, 0x4d, 0x45, 0xf4, 0x36, 0x9a, 0x10, 0xc6,
	0x7b, 0xab, 0x08, 0x99, 0x4e, 0x45, 0x44, 0x34, 0x13, 0xbc, 0x37, 0xa6, 0x9c, 0x2a, 0xa6, 0xba,
	0xa9, 0x14, 0x5a, 0xa0, 0xbb, 0xff, 0xac, 0xed, 0x9e, 0xaf, 0x6d, 0x5d, 0x24, 0x09, 0xe3, 0xa2,
	0x67, 0x7e, 0xf3, 0x06, 0xad, 0x4b, 0x63, 0x31, 0x16, 0xe6, 0xb3, 0x97, 0x7d, 0x59, 0xfa, 0x60,
	0xab, 0x91, 0x52, 0x22, 0x49, 0x62, 0x27, 0x6a, 0x7f, 0x2a, 0x43, 0xf3, 0x69, 0x3e, 0xe3, 0x40,
	0x13, 0x4d, 0xd1, 0x2b, 0xa8, 0xe6, 0x09, 0xd8, 0x09, 0x9c, 0x4e, 0x63, 0xff, 0xa0, 0xbb, 0xcd,
	0xcc, 0xdd, 0xe7, 0xa6, 0xb6, 0xef, 0x9d, 0xfc, 0xb8, 0x51, 0xfa, 0xf2, 0xeb, 0xeb, 0x1d, 0x27,
	0xb4, 0xed, 0xd0, 0x08, 0x1a, 0x45, 0x9e, 0xc2, 0xe5, 0xc0, 0xed, 0x34, 0xf6, 0x1f, 0x6d, 0xd7,
	0x7d, 0x60, 0xd1, 0xe3, 0x35, 0x0a, 0xcf, 0x36, 0x45, 0x2f, 0xa0, 0x1e, 0x4d, 0x08, 0xe7, 0x74,
	0xaa, 0xb0, 0x6b, 0x2e, 0xb8, 0xbf, 0xdd, 0x05, 0x4f, 0xf2, 0xea, 0x70, 0xdd, 0xa6, 0xfd, 0xcd,
	0x05, 0x74, 0xfe, 0x5a, 0x74, 0x13, 0x76, 0x8b, 0xb2, 0x21, 0x8b, 0x8d, 0x5a, 0x3b, 0x61, 0xb3,
	0x80, 0x87, 0x31, 0xba, 0x0e, 0x20, 0xe9, 0xbb, 0x19, 0x55, 0x3a, 0xcb, 0x28, 0x9b, 0x0c, 0xcf,
	0x92, 0xc3, 0x18, 0x61, 0xa8, 0x45, 0x92, 0x12, 0x2d, 0x24, 0x76, 0x03, 0xa7, 0xe3, 0x85, 0xab,
	0x23, 0x6a, 0x43, 0x53, 0xc8, 0x31, 0xe1, 0xec, 0x83, 0x69, 0x85, 0x77, 0x4c, 0x78, 0x83, 0xa1,
	0xab, 0xe0, 0xcd, 0x14, 0x95, 0x43, 0x3d, 0x4f, 0x29, 0xae, 0x98, 0x84, 0x7a, 0x06, 0x8e, 0xe6,
	0x29, 0xdd, 0x10, 0xa2, 0xfa, 0x5f, 0x84, 0x40, 0xd7, 0xc0, 0x1b, 0x11, 0x1e, 0x1f, 0xb3, 0x58,
	0x4f, 0x70, 0x2d, 0x70, 0x3a, 0x95, 0xb0, 0x00, 0xd9, 0xaa, 0x4a, 0x13, 0xa9, 0x87, 0x9a, 0x25,
	0x14, 0xd7, 0x03, 0xa7, 0xe3, 0x86, 0x9e, 0x21, 0x47, 0x2c, 0xa1, 0xe8, 0x0a, 0xd4, 0x29, 0x8f,
	0xf3, 0xa0, 0x67, 0x82, 0x35, 0xca, 0x63, 0x13, 0x6a, 0x41, 0x3d, 0x95, 0x4c, 0x48, 0xa6, 0xe7,
	0x18, 0x4c, 0xdb, 0xf5, 0x19, 0x5d, 0x86, 0xaa, 0xd2, 0x44, 0xcf, 0x14, 0x6e, 0x98, 0x05, 0xed,
	0x09, 0xdd, 0x86, 0x0b, 0x67, 0xd4, 0x37, 0x0a, 0x34, 0x4d, 0xc2, 0x5e, 0x81, 0x33, 0x1d, 0xda,
	0x9f, 0x1d, 0xa8, 0xd9, 0x55, 0xd0, 0x1e, 0x94, 0xad, 0x4f, 0x95, 0xb0, 0xcc, 0xe2, 0x6c, 0xa1,
	0x37, 0xc6, 0x0c, 0x1e, 0xcd, 0x8d, 0x39, 0x95, 0xb0, 0x00, 0x9b, 0xeb, 0xba, 0x7f, 0xae, 0x7b,
	0x0b, 0xf6, 0xac, 0x30, 0x43, 0x3b, 0x60, 0x6e, 0xd1, 0xae, 0xa5, 0x83, 0x7c, 0x4e, 0xfb, 0x2f,
	0x39, 0xa6, 0xf1, 0x30, 0xb3, 0x46, 0xe1, 0x4a, 0xe0, 0x66, 0x46, 0x5a, 0xf8, 0x32, 0x63, 0xfd,
	0x67, 0x27, 0x0b, 0xdf, 0x39, 0x5d, 0xf8, 0xce, 0xcf, 0x85, 0xef, 0x7c, 0x5c, 0xfa, 0xa5, 0xd3,
	0xa5, 0x5f, 0xfa, 0xbe, 0xf4, 0x4b, 0xaf, 0x0f, 0x56, 0xc6, 0x0c, 0x72, 0xcb, 0xfa, 0xc5, 0xbb,
	0x7e, 0xff, 0xb7, 0x97, 0x9d, 0x09, 0xa1, 0x46, 0x55, 0xf3, 0xb2, 0xef, 0xfd, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x56, 0x5b, 0x47, 0xa9, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SpectrumAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpectrumAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpectrumAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllocationType) > 0 {
		i -= len(m.AllocationType)
		copy(dAtA[i:], m.AllocationType)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AllocationType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Priority != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x50
	}
	if m.EndTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x48
	}
	if m.StartTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Bandwidth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.UserType) > 0 {
		i -= len(m.UserType)
		copy(dAtA[i:], m.UserType)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.UserType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if m.AllocationId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AllocationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Channel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedUsers) > 0 {
		for iNdEx := len(m.AllowedUsers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedUsers[iNdEx])
			copy(dAtA[i:], m.AllowedUsers[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AllowedUsers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChannelStatus) > 0 {
		i -= len(m.ChannelStatus)
		copy(dAtA[i:], m.ChannelStatus)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChannelStatus)))
		i--
		dAtA[i] = 0x22
	}
	if m.Bandwidth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x18
	}
	if m.Frequency != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *SpectrumAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllocationId != 0 {
		n += 1 + sovGenesis(uint64(m.AllocationId))
	}
	if m.RequestId != 0 {
		n += 1 + sovGenesis(uint64(m.RequestId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.UserType)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Bandwidth != 0 {
		n += 1 + sovGenesis(uint64(m.Bandwidth))
	}
	if m.StartTime != 0 {
		n += 1 + sovGenesis(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGenesis(uint64(m.EndTime))
	}
	if m.Priority != 0 {
		n += 1 + sovGenesis(uint64(m.Priority))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.AllocationType)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGenesis(uint64(m.Id))
	}
	if m.Frequency != 0 {
		n += 1 + sovGenesis(uint64(m.Frequency))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovGenesis(uint64(m.Bandwidth))
	}
	l = len(m.ChannelStatus)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.AllowedUsers) > 0 {
		for _, s := range m.AllowedUsers {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, &SpectrumAllocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpectrumAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpectrumAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpectrumAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			m.AllocationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedUsers = append(m.AllowedUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
